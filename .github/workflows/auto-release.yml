name: Auto Release with Mod Changes

on:
  push:
    branches: [ main ]  # or master
    paths:
      - 'TravCraft-Client.zip'
      - '.github/workflows/*.yml'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout with LFS
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
    
    - name: Pull LFS files
      run: git lfs pull
    
    - name: Calculate version
      id: version
      run: |
        VERSION_PATCH=$(git rev-list --count HEAD)
        VERSION="1.0.${VERSION_PATCH}"
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Creating version: ${VERSION}"
    
    - name: Get previous release mods list
      id: previous
      run: |
        # Try to get the latest release tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LATEST_TAG" ]; then
          echo "Found previous release: $LATEST_TAG"
          
          # Download the previous release directly from GitHub
          PREV_DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${LATEST_TAG}/TravCraft-Client-${LATEST_TAG}.zip"
          echo "Attempting to download from: $PREV_DOWNLOAD_URL"
          
          # Try versioned filename first, then fallback to base name
          if curl -L -f -o previous_modpack.zip "$PREV_DOWNLOAD_URL" 2>/dev/null; then
            echo "Downloaded versioned release"
          else
            # Fallback to original filename pattern
            PREV_DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${LATEST_TAG}/travcraft-latest.zip"
            echo "Trying fallback URL: $PREV_DOWNLOAD_URL"
            if curl -L -f -o previous_modpack.zip "$PREV_DOWNLOAD_URL" 2>/dev/null; then
              echo "Downloaded from fallback URL"
            else
              echo "Could not download previous release, treating as first release"
              touch /tmp/old_mods.txt
              exit 0
            fi
          fi
          
          # Extract and list mods from previous version
          if [ -f "previous_modpack.zip" ]; then
            unzip -q previous_modpack.zip -d extracted_old
            
            if [ -d "extracted_old/minecraft/mods" ]; then
              cd extracted_old/minecraft/mods
              ls -1 *.jar 2>/dev/null | sort > /tmp/old_mods.txt || touch /tmp/old_mods.txt
              cd $GITHUB_WORKSPACE
            else
              touch /tmp/old_mods.txt
            fi
            
            # Cleanup
            rm -rf extracted_old previous_modpack.zip
          else
            touch /tmp/old_mods.txt
          fi
        else
          echo "No previous release found, this is the first release"
          touch /tmp/old_mods.txt
        fi
        
        echo "Previous mods list:"
        cat /tmp/old_mods.txt || echo "Empty mod list"
    
    - name: Extract and analyze current modpack
      id: analyze
      run: |
        # Create temp directory for extraction
        mkdir -p extracted_new
        
        # Extract current modpack
        unzip -q TravCraft-Client.zip -d extracted_new
        
        # List current mods
        if [ -d "extracted_new/minecraft/mods" ]; then
          cd extracted_new/minecraft/mods
          ls -1 *.jar 2>/dev/null | sort > /tmp/new_mods.txt || touch /tmp/new_mods.txt
          MOD_COUNT=$(wc -l < /tmp/new_mods.txt)
          echo "MOD_COUNT=${MOD_COUNT}" >> $GITHUB_OUTPUT
        else
          touch /tmp/new_mods.txt
          echo "MOD_COUNT=0" >> $GITHUB_OUTPUT
        fi
        
        cd $GITHUB_WORKSPACE
        
        echo "Current mods list:"
        cat /tmp/new_mods.txt
        
        # Calculate differences
        echo "### Added Mods" > /tmp/mod_changes.md
        comm -13 /tmp/old_mods.txt /tmp/new_mods.txt > /tmp/added_mods.txt
        if [ -s /tmp/added_mods.txt ]; then
          echo "" >> /tmp/mod_changes.md
          while IFS= read -r mod; do
            echo "✅ \`$mod\`" >> /tmp/mod_changes.md
          done < /tmp/added_mods.txt
        else
          echo "" >> /tmp/mod_changes.md
          echo "_No mods added_" >> /tmp/mod_changes.md
        fi
        
        echo "" >> /tmp/mod_changes.md
        echo "### Removed Mods" >> /tmp/mod_changes.md
        comm -23 /tmp/old_mods.txt /tmp/new_mods.txt > /tmp/removed_mods.txt
        if [ -s /tmp/removed_mods.txt ]; then
          echo "" >> /tmp/mod_changes.md
          while IFS= read -r mod; do
            echo "❌ \`$mod\`" >> /tmp/mod_changes.md
          done < /tmp/removed_mods.txt
        else
          echo "" >> /tmp/mod_changes.md
          echo "_No mods removed_" >> /tmp/mod_changes.md
        fi
        
        echo "" >> /tmp/mod_changes.md
        echo "### Statistics" >> /tmp/mod_changes.md
        echo "- Total mods: **${MOD_COUNT}**" >> /tmp/mod_changes.md
        ADDED_COUNT=$(wc -l < /tmp/added_mods.txt)
        REMOVED_COUNT=$(wc -l < /tmp/removed_mods.txt)
        echo "- Added: **${ADDED_COUNT}**" >> /tmp/mod_changes.md
        echo "- Removed: **${REMOVED_COUNT}**" >> /tmp/mod_changes.md
        
        echo "Mod changes summary:"
        cat /tmp/mod_changes.md
    
    - name: Update instance.cfg and scrub sensitive data
      run: |
        # Extract modpack
        mkdir -p temp_extract
        unzip -q TravCraft-Client.zip -d temp_extract
        
        # Update and scrub instance.cfg if it exists
        if [ -f "temp_extract/instance.cfg" ]; then
          # Update the instance name to include version
          sed -i "s/name=.*/name=TravCraft-Client-${{ steps.version.outputs.VERSION }}/" temp_extract/instance.cfg
          
          # PRIVACY SCRUBBING: Remove/reset Java paths and other sensitive data
          # Remove or reset JavaPath line
          sed -i '/^JavaPath=/d' temp_extract/instance.cfg
          
          # Remove or reset Java location/version lines
          sed -i '/^JavaVersion=/d' temp_extract/instance.cfg
          sed -i '/^JavaArchitecture=/d' temp_extract/instance.cfg
          sed -i '/^JavaRealArchitecture=/d' temp_extract/instance.cfg
          sed -i '/^JavaVendor=/d' temp_extract/instance.cfg
          sed -i '/^JvmArgs=/d' temp_extract/instance.cfg
          
          # Remove or reset Override Java Location
          sed -i 's/^OverrideJavaLocation=.*/OverrideJavaLocation=false/' temp_extract/instance.cfg
          sed -i 's/^OverrideJava=.*/OverrideJava=false/' temp_extract/instance.cfg
          
          # Keep OverrideJavaArgs if it exists (for memory settings)
          # Just clean the JavaArgs to only keep memory and GC settings, removing paths
          if grep -q "^JavaArgs=" temp_extract/instance.cfg; then
            # Extract current JavaArgs
            CURRENT_ARGS=$(grep "^JavaArgs=" temp_extract/instance.cfg | cut -d'=' -f2-)
            
            # Keep only safe arguments (memory, GC, etc) and remove anything with paths
            # This regex keeps -Xmx, -Xms, -XX options but removes anything with / or \ or :
            CLEANED_ARGS=$(echo "$CURRENT_ARGS" | sed -E 's/-[^ ]*[\/\\:][^ ]*//g' | sed -E 's/  +/ /g' | sed 's/^ *//;s/ *$//')
            
            # If no Xmx is present, add a default
            if ! echo "$CLEANED_ARGS" | grep -q "Xmx"; then
              CLEANED_ARGS="$CLEANED_ARGS -Xmx4G"
            fi
            
            # Update the JavaArgs line with cleaned arguments
            sed -i "s|^JavaArgs=.*|JavaArgs=$CLEANED_ARGS|" temp_extract/instance.cfg
            
            echo "Cleaned JavaArgs: $CLEANED_ARGS"
          fi
          
          # Remove any absolute paths that might contain usernames
          # This removes any line containing common user directory patterns
          sed -i '/\/home\/[^/]*/d' temp_extract/instance.cfg
          sed -i '/\/Users\/[^/]*/d' temp_extract/instance.cfg
          sed -i '/C:\\Users\\[^\\]*/d' temp_extract/instance.cfg
          sed -i '/C:\/Users\/[^\/]*/d' temp_extract/instance.cfg
          
          # Remove wrapper command if it contains paths
          sed -i '/^WrapperCommand=/d' temp_extract/instance.cfg
          sed -i '/^PreLaunchCommand=/d' temp_extract/instance.cfg
          sed -i '/^PostExitCommand=/d' temp_extract/instance.cfg
          
          echo "Scrubbed instance.cfg:"
          echo "========================"
          cat temp_extract/instance.cfg | grep -E "(name=|JavaPath=|OverrideJavaLocation=)" || echo "Key fields shown"
          echo "========================"
          
          # Repackage the modpack with updated and scrubbed config
          cd temp_extract
          zip -rq ../TravCraft-Client-v${{ steps.version.outputs.VERSION }}.zip *
          cd ..
        else
          echo "No instance.cfg found, copying original"
          cp TravCraft-Client.zip TravCraft-Client-v${{ steps.version.outputs.VERSION }}.zip
        fi
        
        # Also create the stable version
        cp TravCraft-Client-v${{ steps.version.outputs.VERSION }}.zip travcraft-latest.zip
        
        # Cleanup
        rm -rf temp_extract
    
    - name: Generate modlist.md for Discord
      run: |
        # Create a nicely formatted modlist for Discord
        echo "# 📦 TravCraft Client Modlist" > modlist.md
        echo "" >> modlist.md
        echo "**Version:** v${{ steps.version.outputs.VERSION }}" >> modlist.md
        echo "**Total Mods:** ${{ steps.analyze.outputs.MOD_COUNT }}" >> modlist.md
        echo "**Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> modlist.md
        echo "" >> modlist.md
        echo "## 📋 Complete Mod List" >> modlist.md
        echo "" >> modlist.md
        
        # Create Discord-friendly mod list (can be copy-pasted)
        echo '```' >> modlist.md
        if [ -s /tmp/new_mods.txt ]; then
          cat /tmp/new_mods.txt >> modlist.md
        else
          echo "No mods found" >> modlist.md
        fi
        echo '```' >> modlist.md
        echo "" >> modlist.md
        
        # Add formatted list with bullets for better readability
        echo "## 🎮 Formatted List" >> modlist.md
        echo "" >> modlist.md
        if [ -s /tmp/new_mods.txt ]; then
          while IFS= read -r mod; do
            # Remove .jar extension for cleaner look
            mod_name="${mod%.jar}"
            echo "- \`$mod_name\`" >> modlist.md
          done < /tmp/new_mods.txt
        fi
        echo "" >> modlist.md
        
        # Add download section
        echo "## 📥 Download" >> modlist.md
        echo "" >> modlist.md
        echo "**Latest Version:** [Download TravCraft Client](https://github.com/${{ github.repository }}/releases/latest/download/travcraft-latest.zip)" >> modlist.md
        echo "" >> modlist.md
        echo "**All Releases:** [View all versions](https://github.com/${{ github.repository }}/releases)" >> modlist.md
        echo "" >> modlist.md
        
        # Add recent changes if this isn't the first release
        if [ -s /tmp/added_mods.txt ] || [ -s /tmp/removed_mods.txt ]; then
          echo "## 📝 Recent Changes" >> modlist.md
          echo "" >> modlist.md
          
          if [ -s /tmp/added_mods.txt ]; then
            echo "### ✅ Recently Added" >> modlist.md
            while IFS= read -r mod; do
              mod_name="${mod%.jar}"
              echo "- \`$mod_name\`" >> modlist.md
            done < /tmp/added_mods.txt
            echo "" >> modlist.md
          fi
          
          if [ -s /tmp/removed_mods.txt ]; then
            echo "### ❌ Recently Removed" >> modlist.md
            while IFS= read -r mod; do
              mod_name="${mod%.jar}"
              echo "- \`$mod_name\`" >> modlist.md
            done < /tmp/removed_mods.txt
            echo "" >> modlist.md
          fi
        fi
        
        # Add footer
        echo "---" >> modlist.md
        echo "*This list is automatically generated and updated with each release.*" >> modlist.md
        
        echo "Generated modlist.md:"
        echo "========================"
        head -20 modlist.md
        echo "... (truncated for display)"
        echo "========================"
    
    - name: Commit modlist.md to repository
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Add and commit the modlist
        git add modlist.md
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to modlist.md"
        else
          git commit -m "Update modlist.md for v${{ steps.version.outputs.VERSION }}"
          git push
        fi
    
    - name: Generate release body
      id: release_body
      run: |
        # Create release body with mod changes
        cat > /tmp/release_body.md << 'EOF'
        ## TravCraft Client v${{ steps.version.outputs.VERSION }}
        
        ### 📦 Download Options
        
        **Stable URL (always latest):**
        ```
        https://github.com/${{ github.repository }}/releases/latest/download/travcraft-latest.zip
        ```
        
        **This version:**
        ```
        https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/TravCraft-Client-v${{ steps.version.outputs.VERSION }}.zip
        ```
        
        ### 📋 Changes in this Release
        
        EOF
        
        # Append mod changes
        cat /tmp/mod_changes.md >> /tmp/release_body.md
        
        echo "" >> /tmp/release_body.md
        echo "---" >> /tmp/release_body.md
        echo "_Instance name automatically set to: TravCraft-Client-${{ steps.version.outputs.VERSION }}_" >> /tmp/release_body.md
        echo "" >> /tmp/release_body.md
        echo "📄 **[View Complete Modlist](https://github.com/${{ github.repository }}/blob/main/modlist.md)**" >> /tmp/release_body.md
        
        # Save to output
        echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
        cat /tmp/release_body.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: TravCraft Client v${{ steps.version.outputs.VERSION }}
        body: ${{ steps.release_body.outputs.RELEASE_BODY }}
        files: |
          TravCraft-Client-v${{ steps.version.outputs.VERSION }}.zip
          travcraft-latest.zip
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cleanup
      if: always()
      run: |
        rm -rf extracted_new extracted_old temp_extract
        rm -f /tmp/*.txt /tmp/*.md
